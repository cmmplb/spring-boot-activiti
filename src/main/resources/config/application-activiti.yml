activiti:
  # 整合模型相关信息配置
  model:
    # 导出模型时是否导出流程 svg 图片, 为 true 时流程文件和流程图片压缩 zip 导出
    export-svg: true
  # 整合部署相关信息配置
  deployment:
    # 是否过滤重复, 默认为 false, 防止资源没有发生变化而再次执行部署方法产生的重复部署
    # - false: 每次部署 ACT_RE_DEPLOYMENT 都会新增一条部署信息, 版本号是 1, ACT_RE_PROCDEF 会根据部署时的模型文件数量新增对应 n 条数据, 同时版本 +1
    # - true: 部署时会判断部署名称和流程定义文件与数据库中是否相同:
    # -- 名称相同, 流程定义文件内容相同, 数据过滤不做处理
    # -- 名称相同, 流程定义文件内容不同, ACT_RE_DEPLOYMENT 表新增一条记录, 版本号 +1 , ACT_RE_PROCDEF 表不会新增数据
    # -- 名称不同, 流程定义文件内容相同, ACT_RE_DEPLOYMENT 表新增一条记录, 版本号是 1, ACT_RE_PROCDEF 会根据部署时的模型文件数量新增对应 n 条数据, 同时版本 +1
    # -- 名称不同, 流程定义文件内容不同, ACT_RE_DEPLOYMENT 表新增一条记录, 版本号是 1, ACT_RE_PROCDEF 会根据部署时的模型文件数量新增对应 n 条数据, 同时版本也是 1
    auto-deployment-enabled: true
    # 是否开启项目清单配置, 用来测试 ACT_RE_PROCDEF 表 APP_VERSION_ 字段和 ACT_RE_DEPLOYMENT 表 PROJECT_RELEASE_VERSION_ 字段
    # 部署相同流程时需要搭配 auto-deployment-enabled = true 一起使用, 否则模型部署和上传部署会冲突报错 ACT_RE_PROCDEF: UNIQUE KEY `ACT_UNIQ_PROCDEF`
    # **注意** 如果设置了项目资源清单版本, 则 isAutoDeploymentEnabled 的判断规则会失效, 判断逻辑改为对比数据库中项目资源清单版本号:
    # - 版本号相同则数据过滤不做处理
    # - 版本号不同则 ACT_RE_DEPLOYMENT 表新增一条记录, 版本号 +1, ACT_RE_PROCDEF 表会根据部署时的模型文件数量新增对应 n 条数据, 同时版本 +1
    # {@link org.activiti.engine.impl.cmd.DeployCmd#deploymentsDiffer(DeploymentEntity, DeploymentEntity)}
    # !deployment.getProjectReleaseVersion().equals(saved.getProjectReleaseVersion());
    project-manifest-enabled: true

spring:
  activiti:
    # database-schema-update 配置项可以设置流程引擎启动和关闭时数据库执行的策略。 database-schema-update 有以下四个值：
    # -false：false 为默认值，设置为该值后，Activiti 在启动时，会对比数据库表中保存的版本，如果没有表或者版本不匹配时，将在启动时抛出异常。
    # -true：设置为该值后，Activiti 会对数据库中所有的表进行更新，如果表不存在，则 Activiti 会自动创建。
    # -create-drop：Activiti 启动时，会执行数据库表的创建操作，在 Activiti 关闭时，执行数据库表的删除操作。
    # -drop-create：Activiti 启动时，执行数据库表的删除操作在 Activiti 关闭时，会执行数据库表的创建操作。
    database-schema-update: true
    # 开启历史库
    # db-history-used 为 true 表示使用历史表，如果不配置，则工程启动后可以检查数据库，只建立了 17 张表，历史表没有建立，则流程图及运行节点无法展示
    db-history-used: true
    # history-level 对于历史数据，保存到何种粒度，Activiti 提供了 history-level 属性对其进行配置。history-level 属性有点像 log4j 的日志输出级别，该属性有以下四个值：
    # -none：不保存任何的历史数据，因此，在流程执行过程中，这是最高效的。
    # -activity：级别高于 none，保存流程实例与流程行为，其他数据不保存。
    # -audit：除 activity 级别会保存的数据外，还会保存全部的流程任务及其属性。audit 为 history 的默认值。
    # -full：保存历史数据的最高级别，除了会保存 audit 级别的数据外，还会保存其他全部流程相关的细节数据，包括一些流程参数等。性能较差，
    # 记录所有实例和变量细节变化，最完整的历史记录，如果需要日后跟踪详细可以开启 full（一般不建议开启）
    history-level: full
    # 校验流程文件，默认校验 resources 下的 processes 文件夹里的流程文件
    check-process-definitions: false
    # 关闭 SpringAutoDeployment，默认值：default，如果不关闭，每次重新启动项目的时候，总是会在 ACT_RE_DEPLOYMENT 自动创建
    # 一个名为 SpringAutoDeployment 工作流记录。但是在开发阶段，需要经常重启项目，久而久之就会导致 ACT_RE_DEPLOYMENT 的记录越来越大了
    # default: 意思是默认的 AutoDeploymentStrategy 实现，会把所有的资源 分组到一个单独的部署，这个实现和以前使用的实现是一样的
    # fail-on-no-process：FailOnNoProcessAutoDeploymentStrategy
    # never-fail：NeverFailAutoDeploymentStrategy 关闭
    deployment-mode: never-fail
    # 默认流程文件自动部署存放路径
    # process-definition-location-prefix: classpath*:**/processes/
    # 流程后缀
#    process-definition-location-suffixes:
#      - "**.bpmn20.xml"
#      - "**.bpmn"